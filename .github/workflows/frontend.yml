name: Aira Frontend CI/CD

on:
  push:
    branches: [ master ] # CI triggers on pushes to master
    tags:
      - 'v*.*.*'       # CD triggers on pushes of tags like v0.4.0, v1.0.0 etc.
  pull_request:
    branches: [ master ] # CI triggers on pull requests targeting master

jobs:
  # ---- Continuous Integration (CI) ----
  ci:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15.0' # Use your specific Node.js version
          cache: 'npm'
          cache-dependency-path: package-lock.json # Path at the root

      - name: Install dependencies
        run: npm install

      # Optional: Uncomment if you set up ESLint
      # - name: Run ESLint
      #   run: npx eslint .

      # Optional: Uncomment if you want to run TypeScript check
      # - name: Run TypeScript Check
      #   run: npx tsc --noEmit

      # Optional: Uncomment if you set up tests
      # - name: Run tests
      #   run: npm test

  # ---- Continuous Deployment (CD) - Triggered by Tags ----
  cd:
    name: Build & Release APK
    runs-on: ubuntu-latest
    needs: ci # Run only if CI passes
    # Run only if the trigger was a push AND it was a tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    env:
      # Make Expo token available to all steps
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      # Get version from tag (e.g., v0.4.0) - used for naming artifacts
      APP_VERSION: ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15.0' # Consistent Node.js version
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm install

      - name: Install Latest EAS CLI
        run: npm install -g eas-cli@latest

      # --- Start EAS Build ---
      - name: EAS Build (Start Only)
        id: build # Give step an ID to reference its output
        run: |
          # Explicitly check authentication status first
          echo "Checking EAS authentication..."
          eas whoami
          if [ $? -ne 0 ]; then
            echo "Error: EAS authentication failed."
            exit 1
          fi
          echo "EAS authentication successful."
          
          # Start the build and capture the full output
          echo "Starting EAS build..."
          BUILD_OUTPUT=$(eas build --platform android --profile production --non-interactive --no-wait 2>&1)
          BUILD_EXIT=$?
          
          echo "--- Build Command Output ---"
          echo "$BUILD_OUTPUT"
          echo "--- End Build Output ---"
          
          if [ $BUILD_EXIT -ne 0 ]; then
            echo "Error: EAS build command failed with exit code $BUILD_EXIT"
            exit 1
          fi
          
          # Extract build URL from the output
          # EAS typically outputs something like "Build: https://expo.dev/accounts/..."
          BUILD_URL=$(echo "$BUILD_OUTPUT" | grep -oP 'https://expo\.dev/accounts/[^/]+/projects/[^/]+/builds/[a-f0-9-]+' | head -1)
          
          if [ -z "$BUILD_URL" ]; then
            echo "Warning: Could not extract build URL from output. Attempting to fetch from build:list..."
            sleep 20  # Wait longer before trying to list builds
            
            # --- Retry loop for build:list ---
            LATEST_BUILD_JSON=""
            for i in 1 2 3 4 5; do
              echo "Attempt $i to fetch latest build list..."
              LATEST_BUILD_JSON=$(eas build:list --platform android --limit 1 --json 2>&1)
              EXIT_CODE=$?
              if [ $EXIT_CODE -eq 0 ]; then
                echo "--- Latest Build JSON Output (Attempt $i) ---"
                echo "$LATEST_BUILD_JSON"
                echo "--- End JSON Output ---"
                BUILD_URL=$(echo "$LATEST_BUILD_JSON" | jq -r '.[0].buildUrl // empty' 2>/dev/null)
                if [ -n "$BUILD_URL" ] && [ "$BUILD_URL" != "null" ]; then
                  echo "Successfully fetched and parsed build list."
                  break # Exit loop on success
                else
                  echo "Warning: Fetched build list but couldn't parse buildUrl (JSON might be empty or wrong structure)."
                fi
              else
                echo "Warning: 'eas build:list' command failed on attempt $i with exit code $EXIT_CODE"
                # Print the error output for debugging
                echo "$LATEST_BUILD_JSON"
              fi
              if [ $i -lt 5 ]; then
                WAIT_TIME=$((i * 10))
                echo "Waiting $WAIT_TIME seconds before retry..."
                sleep $WAIT_TIME
              fi
            done
            # --- End Retry loop ---
          fi

          echo "Extracted Build URL: $BUILD_URL"
          if [ -z "$BUILD_URL" ] || [ "$BUILD_URL" == "null" ]; then
            echo "Error: Could not extract build URL after all attempts."
            exit 1
          fi
          # Save the URL for the next step
          echo "build_url=$BUILD_URL" >> $GITHUB_OUTPUT

      # --- Wait for EAS Build ---
      - name: Wait for EAS Build to Complete
        # Use the URL captured in the previous step
        run: eas build:run --wait --url ${{ steps.build.outputs.build_url }}

      # --- Download EAS Build Artifact ---
      - name: Download Build Artifact (.aab)
        id: download # Give step an ID
        run: |
          echo "Fetching details for completed build URL: ${{ steps.build.outputs.build_url }}"
          # Get artifact URL from finished build matching the build URL
          # Use a loop with retries in case the artifact isn't ready immediately after build:run finishes
          ARTIFACT_URL=""
          for i in 1 2 3 4 5; do
            echo "Attempt $i to get artifact URL..."
            BUILD_DETAILS_JSON=$(eas build:list --platform android --status finished --limit 10 --json 2>&1)
            EXIT_CODE=$?
            
            if [ $EXIT_CODE -eq 0 ]; then
              echo "--- Build List JSON (Attempt $i) ---"
              echo "$BUILD_DETAILS_JSON"
              echo "--- End JSON Output ---"
              # Extract artifact URL specifically for the build URL we are waiting for
              ARTIFACT_URL=$(echo "$BUILD_DETAILS_JSON" | jq -r --arg BUILD_URL "${{ steps.build.outputs.build_url }}" '.[] | select(.buildUrl == $BUILD_URL) | .artifacts.buildUrl // empty' 2>/dev/null)
            else
              echo "Warning: 'eas build:list' command failed with exit code $EXIT_CODE"
              echo "Error output: $BUILD_DETAILS_JSON"
            fi
            
            if [ -n "$ARTIFACT_URL" ] && [ "$ARTIFACT_URL" != "null" ]; then
              echo "Found artifact URL."
              break
            fi
            
            echo "Artifact URL not found yet, waiting..."
            if [ $i -lt 5 ]; then
              WAIT_TIME=$((i * 20))
              echo "Waiting $WAIT_TIME seconds before retry..."
              sleep $WAIT_TIME
            fi
          done

          if [ -z "$ARTIFACT_URL" ] || [ "$ARTIFACT_URL" == "null" ]; then
            echo "Error: Could not find artifact URL for build ${{ steps.build.outputs.build_url }} after multiple attempts."
            exit 1
          fi

          echo "Downloading artifact from: $ARTIFACT_URL"
          # Download the AAB file, using the version from the tag in the filename
          curl -f -L -o aira-${{ env.APP_VERSION }}.aab "$ARTIFACT_URL"
          if [ $? -ne 0 ]; then
            echo "Error: Failed to download artifact"
            exit 1
          fi
          echo "Downloaded AAB successfully."
          # Save the path for the next steps
          echo "artifact_path=aira-${{ env.APP_VERSION }}.aab" >> $GITHUB_OUTPUT

      # --- Set up Java for bundletool ---
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17' # Bundletool needs Java 11+

      # --- Download bundletool ---
      - name: Download bundletool
        id: bundletool
        run: |
          # Use a known recent version, check GitHub releases for the absolute latest
          VERSION="1.15.6"
          echo "Downloading bundletool version $VERSION..."
          curl -f -Lo bundletool.jar "https://github.com/google/bundletool/releases/download/$VERSION/bundletool-all-$VERSION.jar"
          echo "Downloaded bundletool.jar"
          # Save the path for the next step
          echo "jar_path=bundletool.jar" >> $GITHUB_OUTPUT

      # --- Convert AAB to Universal APK ---
      - name: Convert AAB to Universal APK
        id: conversion
        run: |
          echo "Converting ${{ steps.download.outputs.artifact_path }} to APKs..."
          java -jar ${{ steps.bundletool.outputs.jar_path }} build-apks --bundle=${{ steps.download.outputs.artifact_path }} --output=aira-${{ env.APP_VERSION }}.apks --mode=universal
          echo "Extracting universal APK..."
          unzip aira-${{ env.APP_VERSION }}.apks -d apks/
          ls apks/ # List contents for debugging
          # Save path and desired final name (using version tag) for the upload step
          echo "apk_path=apks/universal.apk" >> $GITHUB_OUTPUT
          echo "apk_name=aira-${{ env.APP_VERSION }}-universal.apk" >> $GITHUB_OUTPUT

      # --- Create GitHub Release and Upload APK ---
      - name: Create Release and Upload APK
        uses: softprops/action-gh-release@v2
        with:
          # GITHUB_TOKEN is automatically provided by Actions
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }} # Use the tag that triggered the workflow (e.g., v0.4.0)
          name: Release ${{ github.ref_name }} # e.g., Release v0.4.0
          body: | # Optional: Add release notes here
            Automated release for version ${{ github.ref_name }}

            **Aira Android App**
            Install this APK directly on your device (`universal.apk`).
          draft: false # Set to true to create a draft release instead
          prerelease: false
          files: | # Define file(s) to upload: source path => destination name
            ${{ steps.conversion.outputs.apk_path }} => ${{ steps.conversion.outputs.apk_name }}